TODO:
0.2:
+ compare against 'actual' solution

0.1:
+ add 'waypoints'
+ create route description from path. ex: turn right, move straight ahead 4 squares, turn left...
+ return the difference between the path length and the straight course length
+ save with localstorage
+ define movement patterns for open space: if curent is next to or diagonally next to plaza square, mark as openSpaceBegin. Check each subsequent square in open space if direct path is faster between current and openSpaceBegin. Replace the path in nArray between openSpaceBegin and current. Then look for direct path between openSpaceBegin + next,  then  between openSpaceBegin + next + next, and so on.
+ avoid looping through obj efter each function call
+ improve save/load speed/logic
+ allow reload without window refresh
+ count and display disabled on eliminateSquares call
+ add paint/rubber features
+ show expected path length and disabled count
+ add logic to determine functionCounter value : ie. n of fork squares as a parameter
+ remove need for isMarked. Use if nArray.includes() instead
+ count fork squares and save in array. Check every 4th fork square if distance to previous ones are shorter in the solutions in the solutionArray. In open space, mark entrance to open space and for every fourth step check for shorter distance to 4th, 8th, 16th and 32nd previous open space(if present since entry)


Done:
+ create ids for grid items with javascript
+ set start and end by clicking
+ paint path on mousedown
+ evaluate length of path on each recursion and return null if path length + actual direct length to target is greater than previous solution.
+ break if the last 24 solutions are same length and identical. Otherwise require 48 with same length
+ optimize to skip while loop when paths are already found on the current storeObject.
+ improve logic of 'staircase' appearance
+ disable 3 set squares in a triangle next to fork squares
+ fix reset
Prevent hairpin turns.
